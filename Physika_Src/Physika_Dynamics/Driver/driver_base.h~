/*
 * @file driver_base.h 
 * @brief Base class of all driver classes. A driver class manages the simulation process.
 * @author Fei Zhu
 * 
 * This file is part of Physika, a versatile physics simulation library.
 * Copyright (C) 2013 Physika Group.
 *
 * This Source Code Form is subject to the terms of the GNU General Public License v2.0. 
 * If a copy of the GPL was not distributed with this file, you can obtain one at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 *
 */

#ifndef PHYSIKA_DYNAMICS_DRIVER_DRIVER_BASE_H_
#define PHYSIKA_DYNAMICS_DRIVER_DRIVER_BASE_H_

namespace Physika{

template <typename Scalar>
class DriverBase
{
public:
    DriverBase();
    DriverBase(int start_frame, int end_frame, Scalar frame_rate, Scalar max_dt, Scalar min_dt, bool write_to_file);
    virtual ~DriverBase();
    virtual void run();//run the simulation from start frame to end frame
    virtual void advanceFrame();//advance one frame
    virtual void advanceStep(Scalar dt)=0;//advance one time step
    virtual void write(const char *file_name)=0;//write simulation data to file
    virtual void read(const char *file_name)=0;//read simulation data from file

    inline void setMaxDt(Scalar max_dt){max_dt_ = max_dt;}
    inline Scalar maxDt(){return max_dt_;}
    inline void setMinDt(Scalar min_dt){min_dt_ = min_dt;}
    inline Scalar minDt(){return min_dt_;}
    inline void setFrameRate(Scalar frame_rate){frame_rate_ = frame_rate;}
    inline Scalar frameRate(){return frame_rate_;}
    inline void setStartFrame(int start_frame){start_frame_ = start_frame;}
    inline int getStartFrame(){return start_frame_;}
    inline void setEndFrame(int end_frame){end_frame_ = end_frame;}
    inline int getEndFrame(){return end_frame_;}
    inline void setWriteToFileBit(bool write_to_file){write_to_file_ = write_to_file;}
    inline bool getWriteToFileBit(){return write_to_file_;}
protected:
    int start_frame_;
    int end_frame_;
    Scalar frame_rate_;
    Scalar max_dt_;
    Scalar min_dt_;
    bool write_to_file_;
};

//implementation
template <typename Scalar>
DriverBase<Scalar>::DriverBase()
    :start_frame_(0),end_frame_(0),frame_rate_(0),max_dt_(0),min_dt_(0),write_to_file_(false)
{
}

template <typename Scalar>
DriverBase<Scalar>::DriverBase(int start_frame, int end_frame, Scalar frame_rate, Scalar max_dt, Scalar min_dt, bool write_to_file)
    :start_frame_(start_frame),end_frame_(end_frame),frame_rate_(frame_rate),max_dt_(max_dt),min_dt_(min_dt),write_to_file_(write_to_file)
{
}

template <typename Scalar>
DriverBase<Scalar>::~DriverBase()
{
}

template <typename Scalar>
void DriverBase<Scalar>::run()
{
}

template <typename Scalar>
void DriverBase<Scalar>::advanceFrame()
{
}

}  //end of namespace Physika

#endif  //PHYSIKA_DYNAMICS_DRIVER_DRIVER_BASE_H_
