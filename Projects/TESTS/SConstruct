#################################################################
# Scons script PhysikaTest project
# @author: Fei Zhu, 04/27/2014
# Usage: 
#       1. Write the test code in a single cpp file
#       2. Edit the script by making src_files variable src file
#       3. Build the project by entering "scons" in terminal               
#################################################################

#IMPORTS
import fnmatch
import os
import platform
from os.path import basename
from glob import glob

######################## EDIT HERE! #############################
#BUILD TYPE
#build_type='Release'
build_type='Debug'

#BUILD MSVC PROJECTS FOR WINDOWS
build_msvc=True
#build_msvc=False

#PROJECT NAME: SET NAME OF YOUR PROJECT
project_name='PhysikaTest'

#SRC PATH: SET ROOT DIRECTORY OF YOUR CODE
src_root_path=os.getcwd()

#IGNORED SRC PATH: SET PATH TO DIRECTORIES OF SOURCE CODE WHICH YOU
#                  DON'T WANT TO INCLUDE IN THE BUILD
#EXAMPLE: ignored_src_path=['./code1/','./code2/']
ignored_src_path=[]

#PHYSIKA_PATH: SET PATH TO COMPILED
physika_inc_path=['../../Public_Library/include/']
physika_lib_path=['../../Public_Library/lib/']

#ADDITIONAL PATH: SET ADDITIONAL INCLUDE AND LIB PATH
#EXAMPLE: additional_inc_path=['./path1/','../path2/']
additional_inc_path=[]
additional_lib_path=[]

#PHYSIKA LIBS TO LINK: NOTE NECESSARILLY ALL PHYSIKA LIBS
physika_libs=['Physika_Render','Physika_IO','Physika_GUI','Physika_Geometry',
              'Physika_Dynamics','Physika_Core','LodePNG']

#ADDITIONAL LIBS TO LINK
#EXAMPLE: additional_libs=['lib1','lib2']
additional_libs=[]
##################################################################

#########EDIT ONLY IF YOU'ARE AWARE WHAT YOU'RE DOING#############

#OS TYPE
os_name=platform.system()
os_architecture=platform.architecture()[0]

#COMPILER
compiler=[]
if os_name in ('Linux','Darwin') or (os_name=='Windows' and build_msvc==False):
   compiler='g++'
else:
   compiler='msvc'

#SRC FILES
src_files=['physika_assert_test.cpp']
inc_files=[]
#for dir,_,_ in os.walk(src_root_path):
#    if dir not in ignored_src_path:
#       src_files.extend(glob(os.path.join(dir,'*.cpp')))
#       inc_files.extend(glob(os.path.join(dir,'*.h')))

#INCLUDE PATH AND LIB PATH
include_path=physika_inc_path+additional_inc_path
lib_path=physika_lib_path+additional_lib_path
libs=physika_libs+additional_libs

#TARGET NAME
target_name=project_name+build_type

#ENVIRONMENT
ENV={'PATH':os.environ['PATH']}
if compiler=='g++':
   CC='g++'
   CXX='g++'
   tools=['gcc','g++','gnulink']
   if build_type=='Release':
      CCFLAGS=['-O3','-fno-strict-aliasing','-std=gnu++0x','-DNDEBUG']
   else:
      CCFLAGS=['-std=gnu++0x','-fno-strict-aliasing','-g']
   env=Environment(CC=CC,CXX=CXX,tools=tools,CCFLAGS=CCFLAGS,CPPPATH=include_path,LIBPATH=lib_path,RPATH=lib_path,LIBS=libs,ENV=ENV)
else:
   if build_type=='Release':
      CCFLAGS=['/Ox','/EHsc','/DNDEBUG','/W3']
   else:
      CCFLAGS=['/Zi','/EHsc','/W3']
   ENV['TMP']=os.environ['TMP']
   if os_architecture=='32bit':
   	arc='x86'
   else:
	arc='amd64'
   env=Environment(CCFLAGS=CCFLAGS,CPPPATH=include_path,LIBPATH=lib_path,RPATH=lib_path,LIBS=libs,ENV=ENV,MSVS_ARCH=arc,TARGET_ARCH=arc)

#BUILD
target=env.Program(target_name,src_files)
#GENERATE MSVC PROJECT OPTIONALLY
if compiler=='msvc':
   sln=env.MSVSProject(target=target_name+env['MSVSPROJECTSUFFIX'],srcs=src_files,incs=inc_files,buildtarget=target,variant=build_type)

#CUSTOMIZE CLEAN OPTION
if compiler=='msvc':
   sln_delete_files=[build_type+'/','obj/']
   for name in os.listdir('./'):
       if name.endswith('.user') or name.endswith('.pdb') or name.endswith('.suo') or name.endswith('.sdf'):
          sln_delete_files.append(name)
   Clean(sln,sln_delete_files)
