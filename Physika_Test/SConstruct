#################################################################
# Scons script for Physika Test
# @author: Wei Chen,30/12/2016
# Usage: enter root directory of the test project in terminal and
#        enter "scons"                
#################################################################


######################CONFIGURATIONS#############################

#BUILD TYPE
#build_type = 'Release'
build_type = 'Debug'

#MSVC VERSION FOR WINDOWS ENV
#msvc_version = '10.0'   #VS2010
#msvc_version = '12.0'   #VS2013

#TO SUPPORT C++11/14, VS2015 IS NEEDED
msvc_version = '14.0'   #VS2015

#USE OPENGL(GL,GLU,GLUT,GLUI) OR NOT
use_gl = True
#use_gl = False

#USE OPENMP
#use_openmp = True
use_openmp = False

#USE CUDA
use_cuda = True
#use_cuda = False
#################################################################

#IMPORTS
import os
import platform
from os.path import basename
from glob import glob

#OS TYPE
os_name         = platform.system()
os_architecture = platform.architecture()[0]

#COMPILER
compiler = ''
if os_name in ('Linux', 'Darwin'):
    compiler = 'g++'
else:
    compiler = 'msvc'

#ENVIRONMENT
ENV = {'PATH':os.environ['PATH']}
if os_architecture == '32bit':
    arc = 'x86'
else:
    arc = 'amd64'

if os_name == 'Darwin':
    if 'LIBRARY_PATH' in os.environ: ENV['LIBRARY_PATH'] = os.environ['LIBRARY_PATH']
    if 'LD_LIBRARY_PATHS' in os.environ: ENV['LD_LIBRARY_PATHS'] = os.environ['LD_LIBRARY_PATHS']

#PHYSIKA_LIB_PATH: SET LIB PATH TO COMPILED
physika_inc_path = ['../Public_Library/include/']
if build_type == 'Release':
    physika_lib_path = ['../Public_Library/lib/release/']
else:
    physika_lib_path = ['../Public_Library/lib/debug/']

#PHYSIKA LIBS TO LINK: NOTE NECESSARILLY ALL PHYSIKA LIBS
#NOTE: THE ORDER MATTERS
physika_libs = ['Physika_GUI', 'Physika_Dynamics', 'Physika_Render', 'Physika_IO', 'Physika_Geometry', 'Physika_Core', 'Physika_Numerics', 'LodePNG', 'cuda_link']

#PHYSIKA IS DEPENDENT ON STACKWALKER ONLY ON WINDOWS WITH MSVC
if compiler == 'msvc':
    physika_libs.append('StackWalker')
    
#ADDITIONAL PATH: SET ADDITIONAL INCLUDE AND LIB PATH
#EXAMPLE: additional_inc_path=['./path1/','../path2/']
additional_inc_path = []
additional_lib_path = []

#ADDITIONAL LIBS TO LINK
#EXAMPLE: additional_libs=['lib1','lib2']
additional_libs = []

#FOR STACK TRACE SUPPORT
if os_name in ('Linux','Darwin'):
    additional_libs.append('dl')
elif compiler == 'msvc':
    additional_libs.append('Advapi32')

#USE OPENGL OR NOT
if use_gl == True:
    physika_inc_path_str = ''.join(physika_inc_path)
    additional_inc_path.append(physika_inc_path_str+'Physika_Dependency/OpenGL/')
    if os_name in ('Linux', 'Darwin'):
        if os_architecture == '32bit':
            additional_libs.append('glui32')
        else:
            additional_libs.append('glui64')
        additional_libs.append('freeglut')
        additional_libs.append('GLU')
        additional_libs.append('GL')
        additional_libs.append('X11')
    elif os_name == 'Windows':
        additional_libs.append('glui32')
        additional_libs.append('freeglut')
        additional_libs.append('glu32')
        additional_libs.append('opengl32')
        additional_libs.append('glew32')

#INCLUDE PATH AND LIB PATH
include_path = physika_inc_path+additional_inc_path
lib_path     = physika_lib_path+additional_lib_path
libs         = physika_libs+additional_libs
    
env = Environment(ENV = ENV, CPPPATH = include_path, LIBPATH=lib_path, RPATH=lib_path, LIBS=libs, MSVS_ARCH = arc, TARGET_ARCH = arc, MSVC_VERSION = msvc_version)

#SEPARATE RELEASE ENV & DEBUG ENV
release_env = env.Clone()
debug_env = env.Clone()
if compiler == 'g++':
    #release
    CCFLAGS = ['-O3', '-Wall', '-fno-strict-aliasing', '-std=gnu++11', '-DNDEBUG']
    if use_openmp: #openmp support
        CCFLAGS.append('-fopenmp') 
        release_env.Append(LINKFLAGS = '-fopenmp')
    release_env.Replace(CCFLAGS = CCFLAGS)
        
    #debug
    CCFLAGS = ['-g', '-Wall', '-fno-strict-aliasing', '-std=gnu++11']
    if use_openmp: #openmp support
        CCFLAGS.append('-fopenmp') 
        debug_env.Append(LINKFLAGS = '-fopenmp') 
    debug_env.Replace(CCFLAGS = CCFLAGS)
    
    #FOR STACK TRACE SUPPORT
    release_env.Append(LINKFLAGS = '-rdynamic')
    debug_env.Append(LINKFLAGS = '-rdynamic')
else:
    #release
    CCFLAGS = ['/Ox', '/EHsc', '/DNDEBUG', '/W3', '/bigobj', '/MDd']
    if use_openmp: CCFLAGS.append('/openmp') #openmp support
    release_env.Replace(CCFLAGS = CCFLAGS)
        
    #debug
    CCFLAGS = ['/Od', '/Zi', '/EHsc', '/W3', '/bigobj', '/MDd']
    if use_openmp: CCFLAGS.append('/openmp') #openmp support
    debug_env.Replace(CCFLAGS = CCFLAGS)
    
    debug_env['LINKFLAGS'] = ['/DEBUG']
    debug_env['CCPDBFLAGS'] = '/Zi /Fd${TARGET}.pdb'
    
#CUDA SUPPORT
if use_cuda == True:
    release_env.Tool('cuda', toolpath = ['../Documentation/Cuda_Scons_Tool/'])
    debug_env.Tool('cuda', toolpath = ['../Documentation/Cuda_Scons_Tool/'])

###################################################################################################
#generate gtest and gmock libraries    
google_test_libs = SConscript('google_test/SConscript', exports = 'release_env os_name os_architecture compiler')
###################################################################################################

###################################################################################################
#generate project for non-unit test

non_unit_test_env = []
if build_type == 'Debug':
    non_unit_test_env = debug_env
else:
    non_unit_test_env = release_env
    
non_unit_test_src_files = []
for dir,_,_ in os.walk('Physika_Test_Src/Physika_Non_Unit_Test_Src/'):
    non_unit_test_src_files.extend(glob(os.path.join(dir, '*.cpp')))
    
for src_file in non_unit_test_src_files:
    target_name = os.path.splitext(src_file)[0]
    target = non_unit_test_env.Program(target_name, src_file)
    print target
    
    #WINDOWS WORKAROUND: COPY DLLS TO EXECUTIVE DIRECTORY
    if os_name == 'Windows':
        for rpath in lib_path:
            if not os.path.exists(rpath):
                continue
            for dll_name in os.listdir(rpath):
                if dll_name.endswith('.dll'):
                    Command(os.path.dirname(target_name)+'/'+dll_name, rpath+dll_name, Copy("$TARGET", "$SOURCE"))

if compiler == 'msvc':
    debug_target = ['Physika_Test_Src\\Physika_Non_Unit_Test_Src\\\Physika_Render\\Screen_Based_Render_Manager\\vdrift_render_test.exe']
    non_unit_test_proj = non_unit_test_env.MSVSProject(target = 'Physika_Non_Unit_Test'+env['MSVSPROJECTSUFFIX'], srcs = non_unit_test_src_files, buildtarget = debug_target, variant = 'debug', auto_build_solution = 0)
###################################################################################################

###################################################################################################
#generate project for unit test

#environment for unit test
unit_test_env = []
if build_type == 'Debug':
    unit_test_env = debug_env.Clone()
else:
    unit_test_env = release_env.Clone()

unit_test_env.Append(CPPPATH ='google_test/')
unit_test_env.Append(LIBPATH ='google_test/lib/')
unit_test_env.Append(RPATH ='google_test/lib/')
unit_test_env.Append(LIBS = 'gtest_and_gmock')
unit_test_env.Append(LIBS = 'gtest_and_gmock_main')

#link main function defined in lib 'gtest_and_gmock_main'
unit_test_env.Append(LINKFLAGS = '/SUBSYSTEM:CONSOLE')

unit_test_src_files = []
for dir,_,_ in os.walk('Physika_Test_Src/Physika_Unit_Test_Src/'):
    unit_test_src_files.extend(glob(os.path.join(dir, '*.cpp')))

for src_file in unit_test_src_files:
    target_name = os.path.splitext(src_file)[0]
    unit_test_env.Program(target_name, src_file)
    
target_name = 'Physika_Unit_Test_'+build_type
target = unit_test_env.Program(target_name, unit_test_src_files)

Requires(google_test_libs, target)

if compiler == 'msvc':
    unit_test_proj = unit_test_env.MSVSProject(target = 'Physika_Unit_Test'+env['MSVSPROJECTSUFFIX'], srcs = unit_test_src_files, buildtarget = target, variant = 'debug', auto_build_solution = 0)

###################################################################################################

###################################################################################################
#generate project for Physika_Src

physika_src_root = '../Physika_Src/'

physika_src_files = []
physika_header_files = []

for dir,_,_ in os.walk(physika_src_root):
    physika_src_files.extend(glob(os.path.join(dir, '*.cpp')))
    physika_src_files.extend(glob(os.path.join(dir, '*.cu')))
    physika_header_files.extend(glob(os.path.join(dir, '*.h')))

if compiler == 'msvc':
    physika_src_proj = env.MSVSProject(target = 'Physika_Src'+env['MSVSPROJECTSUFFIX'], srcs = physika_src_files, incs = physika_header_files, variant = 'debug', auto_build_solution = 0)

###################################################################################################
#generate msvc solution
if compiler == 'msvc':
    proj_files = [unit_test_proj[0], non_unit_test_proj[0], physika_src_proj[0]]
    sln = env.MSVSSolution(target = 'Physika_Test'+env['MSVSSOLUTIONSUFFIX'], projects = proj_files, variant = 'debug')
###################################################################################################


#CUSTOMIZE CLEAN OPTION
sln_delete_files = ['release/', 'obj/', 'Physika.suo', 'Physika.sdf']
sln_delete_files.extend(['debug/', 'obj/', 'Physika.suo', 'Physika.sdf'])
for name in os.listdir('./'):
    if name.endswith('.user') or name.endswith('.pdb') or name.endswith('.ilk') or name.endswith('.db') or name.endswith('.vs'):
        sln_delete_files.append(name)

for dir,_,_ in os.walk('./'):
    sln_delete_files.extend(glob(os.path.join(dir, '*.ilk')))
    sln_delete_files.extend(glob(os.path.join(dir, '*.pdb')))
    sln_delete_files.extend(glob(os.path.join(dir, '*.dll')))

        
Clean(sln, sln_delete_files)